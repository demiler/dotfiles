#!/bin/sh

alias echo="echo -e"

helpmsg() {
  echo "Warp around nasm compiler. Forced 32x bit compilation.
Usage: basm [-f] \e[4mfile\e[0m [-ripgkswh] [-d \e[4mdir\e[0m] [-o \e[4mfile\e[0m] [-l \e[4mdir\e[0m]
  -f\tFile name
  -r\tRun if compile
  -i\tDon't copy io.inc lib
  -d\tOutput dir (build by default)
  -o\tSet output file
  -p\tOutput files in current dir
  -g\tCompile with debug
  -k\tKeep object files
  -w\tIgnore warnings
  -s\tNo additional messages
  -l\tLibrary directory
  -h\tDisplay this message
  -e\tError codes
  "
}
errorcode() {
  echo "Error codes:
    0\tEverything is ok
    1\tNo input file
    2\tFile not found
    3\tDirectory not found
    4\tUser warning decline
  "
}
warning() {
  [ $warnings -eq 1 ] && echo "\e[33mWarning\e[37m: $1"
  return 0
}
msg() {
  [ $msg -eq 1 ] && echo "$1"
  return 0
}

libPath=$HOME/bin/data
run=0
ioinc=1
keepobj=0
warnings=1
debug=""
dir="build"
file=""
output=""
msg=1
libs=""

if [ $# -lt 1 ]; then
  helpmsg
  exit;
fi

while [ ! -z "$1" ]; do
  args="$1"
  [ $(echo "$1" | wc -m) -gt 3 ] &&\
    args="$(echo "$1" | fold -w1 | grep -v '-' | sed 's/^/-/')" &&\
    [ "$(echo $1 | fold -w1 | head -1)" != "-" ] && args="$1"

  for arg in $args; do
    case "$arg" in
      -h) helpmsg; exit 0;;
      -r) run=1;;
      -d) [ "$dir" != "build" ] && warning "flag '-p' overwritten by '-d' flag!"; dir="$2"; shift;;
      -p) [ "$dir" != "build" ] && warning "flag '-d' overwritten by '-p' flag!"; dir=".";;
      -i) ioinc=0;;
      -f) file="$2"; shift;;
      -g) debug="-g";;
      -k) keepobj=1;;
      -w) warnings=0;;
      -o) output="$2"; shift;;
      -e) errorcode; exit 0;;
      -s) msg=0;;
      -l) libs="-i $2/"; shift;;
      -*) warning "unknown flag '$arg'!";;
       *) file="$1";;
    esac
  done
  shift
done

[ -z $file ] && echo "\e[31mError\e[37m: No input file!" && exit 1
[ ! -f "$file" ] && echo "\e[31mError\e[37m: File not found!" && exit 2

[ "$dir" = "build" ] && [ ! -d "build" ] && mkdir "build"
[ ! -d "$dir" ] && echo "\e[31mError\e[37m: Directory \"$dir\" doesn't exists!" && exit 3

ext=$(echo $file | cut -d'.' -f2)
name=$(echo $file | cut -d'.' -f1)
[ "$name" = "$file" ] && name="$name"EXT
[ -z $output ] && output="$name"

if [ $warnings -eq 1 ]; then
  if [ -z $ext ]; then
    warning "no file extension!" && read -p "Continue? [y/N] " choose
    [ -z $choose ] && choose="n"
    [ "$choose" != "y" ] && msg "No" && exit 4 || msg "Yes"
  fi

  if [ "$ext" != "asm" ]; then
    warning "not an asm extension!" && read -p "Continue? [y/N] " choose
    [ -z $choose ] && choose="n"
    [ "$choose" != "y" ] && msg "No" && exit 4 || msg "Yes"
  fi
fi

c_temp=/tmp/_asm_build_$$.c
o_temp=/tmp/_asm_build_$$.o

echo '#include <stdio.h>' >> $c_temp
echo 'FILE *get_stdin(void) { return stdin; }' >> $c_temp
echo 'FILE *get_stdout(void) { return stdout; }' >> $c_temp

[ $ioinc -eq 1 ] && [ ! -f "$libPath/io.inc" ] && warning "can not find io.inc library!" && ioinc=0
[ $ioinc -eq 1 ] && [ ! -f "io.inc" ] && cp "$libPath/io.inc" . && [ $msg -eq 1 ] && msg "io.inc copied to your folder"

gcc -x c $c_temp -c -o $o_temp -m32 $debug -lm
nasm $debug -f elf32 $file -o "$dir/$name.o" -DUNIX "$libs"

[ $? -ne 0 ] && rm -f $c_temp $o_temp "$dir/$name.o" && exit

gcc "$dir/$name.o" $o_temp $debug -o "$dir/$output" -m32 -lm
rm -f $c_temp $o_temp
[ $keepobj -ne 1 ] && rm "$dir/$name.o"

if [ $run -eq 1 ]; then
  msg "$name compiled!"
  "$dir/$output"
  retval=$?
  [ $retval -ne 0 ] && warning "Program returned non-zero value!" && exit $retval
fi
exit 0
