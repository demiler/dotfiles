#!/bin/sh
helpmsg() {
  echo "Simple wrap around gcc compiler for C files.
Compiles your C files and can run them, pipe data into them,
  test them, watch them changing and auto apply some flags.

Usage: bgcc [-f] \e[4mfile\e[0m [-rpgwsjmahe] [-d \e[4mdir\e[0m] [-o \e[4mfile\e[0m] [-i \e[4mfile\e[0m]
  -f\tFile name
  -r\tRun if compile
  -i\tPipe data from file
  -t\tRun test from file
   -I\tHide test input
   -D\tDont trim test data
   -A\tDont trim test answer
   -T\tShow test file structure
   -F\tShow only failed tests
  -S n\tCompile with sanitizer level n
  -L\tPrint sanitizers levels
  -W\tWatch file
  -d\tOutput dir (build by default)
  -o\tSet output file
  -p\tOutput files in current dir
  -g\tCompile with debug
  -w\tIgnore script warnings
  -s\tNo additional script messages
  -j\tUse ejudge flags
  -m\tUse math lib
  -a\tUse 32 arch
  -l\tUse linked libraries
  -h\tDisplay this message
  -e\tScript error codes
  -P\tUse g++ instead of gcc
  --\tPass args to your program
  "
}
errorcode() {
  echo "Error codes:
    0\tEverything is ok
    1\tNo input file
    2\tFile not found
    3\tDirectory not found
    4\tUser warning decline
    5\tNo pipe file found
    6\tNo test file found
    7\tinotifywait is not installed
    8\tIncompatible flags
    9\tForgotten argument
  "
}
showTestFileStruct() {
  echo "Test file structure:
  --TEST
  put data here
  ...
  --ANSWER [optional]
  put ans here
  ...
  --

  and so on...
  "
}
error() {
  echo "\e[31mError\e[0m: $1"
  exit $2
}
warning() {
  [ $warnings -eq 1 ] && echo "\e[33mWarning\e[37m: $1" 
  return 0
}
msg() {
  [ $msg -eq 1 ] && echo "$1"
  return 0
}
printSanitizers() {
  echo "Sanitizers levels:
0 - Addresses violation, memory leak
address pointer-compare pointer-subtract leak

1 - Thread sanitizer
thread

2 - Undefined behavior sanitizer
undefined: shift shift-exponent shift-base integer-divide-by-zero
unreachable vla-bound null return signed-integer-overflow
bounds bounds-strict alignment object-size float-divide-by-zero
float-cast-overflow float-cast-overflow nonnull-attribute
bool enum vptr pointer-overflow builtin

3 - Overflow UB sanitizer
signed-integer-overflow float-cast-overflow pointer-overflow
shift shift-exponent shift-base

4 - Enable all sanitizers (except thread)
address pointer-compare pointer-subtract leak
undefined: shift shift-exponent shift-base integer-divide-by-zero
unreachable vla-bound null return signed-integer-overflow
bounds bounds-strict alignment object-size float-divide-by-zero
float-cast-overflow float-cast-overflow nonnull-attribute
bool enum vptr pointer-overflow builtin
signed-integer-overflow float-cast-overflow pointer-overflow
shift shift-exponent shift-base
  "
}
getSanitizer() {
  printf "-"
  printf "fsanitize="
  case "$1" in
    0) 
      printf "address,pointer-compare,pointer-subtract,leak";;
    1) printf "thread";;
    2) printf "undefined";;
    3)
      printf "signed-integer-overflow,float-cast-overflow,pointer-overflow,"
      printf "shift,shift-exponent,shift-base"
      ;;
    4)
      printf "address,pointer-compare,pointer-subtract,leak,"
      printf "shift,shift-exponent,shift-base,integer-divide-by-zero,"
      printf "unreachable,vla-bound,null,return,signed-integer-overflow,"
      printf "bounds,bounds-strict,alignment,object-size,float-divide-by-zero,"
      printf "float-cast-overflow,float-cast-overflow,nonnull-attribute,"
      printf "bool,enum,vptr,pointer-overflow,builtin,"
      printf "signed-integer-overflow,float-cast-overflow,pointer-overflow,"
      printf "shift,shift-exponent,shift-base"
      ;;
  esac
}

################ TESTER ################ 
#test structure:
#   |--Test
#   |datadata
#   |datadata
#   |--Answer [optional]
#   |datadata
#   |--

printNiceTestBound() {
  width=$(tput cols)
  title="|Test $1|"
  countOfSymbols=$(( ($width - ${#title}) / 2 ));
  bound=""
  for i in $(seq 1 $countOfSymbols); do bound=$bound'='; done
  title=$(echo $bound$title$bound)
  for i in $(seq 1 $(( $width - ${#title} ))); do printf '='; done
  echo $title
}
killer() {
  sleep 10
  kill -9 $1 > /dev/null 2>&1
  [ "$?" -eq 0 ] && echo "\n\e[31mProcces killed, it took more than 10s.\e[0m"
}

performTest() {
  if [ "$onlyFailed" -ne 1 ]; then
    [ "$testId" -ne 0 ] && echo
    printNiceTestBound $testId
  fi

  data="$1"
  ans="$2"
  [ $dontTrimData -eq 0 ] && 
    data=$(echo "$1" | sed "s/^ *// ; s/ *$//")
  [ $dontTrimAns -eq 0 ] && 
    ans=$(echo "$2" | sed "s/^ *// ; s/ *$//")

  [ "$onlyFailed" -ne 1 ] &&
    [ $hideData -eq 0 ] && echo "$data\n\e[33mResult:\e[0m"

  timeStart="$(date +%s%N)"

  if [ "$onlyFailed" -ne 1 ]; then
    echo "$data" | $program $progArgs | tee $tmpfile &
    pidOfProg=$!
    killer $pidOfProg &
    pidOfKiller=$!
    wait $pidOfProg
    kill -9 $pidOfKiller > /dev/null 2>&1
  else
    echo "$data" | $program $progArgs > $tmpfile
  fi

  progOutput="$(cat $tmpfile)"

  timeEnd="$(date +%s%N)"
  
  [ "$onlyFailed" -ne 1 ] &&
    [ "$(printf "$progOutput" | tail -c 1)" ] && echo

  takingTime=$(echo "scale=2; ($timeEnd - $timeStart) / 1000000" | bc -l)

  [ "$onlyFailed" -ne 1 ] &&
    echo "\e[36mTime:\e[0m" $takingTime"ms"

  testId=$(($testId + 1))

  if [ ! -z "$ans" ]; then 
    [ $dontTrimAns -eq 0 ] && 
      progOutput=$(echo "$progOutput" | sed "s/^ *// ; s/ *$//")

    if [ "$ans" = "$progOutput" ]; then
      [ "$onlyFailed" -ne 1 ] &&
        echo "\e[32mCorrect\e[0m" 
      return 1
    else
      if [ "$onlyFailed" -eq 1 ]; then
        echo
        printNiceTestBound $testId
        [ $hideData -eq 0 ] && echo "$data\n\e[33mResult:\e[0m"
        echo "$progOutput"
      fi

      echo "\e[31mIncorrect\e[0m"
      [ "$onlyFailed" -eq 1 ] &&
        echo "$ans"
      return 0
    fi
  fi
}

runTests() {
  #0 - waiting for test
  #1 - reading test data
  #2 - reading answer
  curStatus=0
  lineNum=0
  buf=''
  testId=0
  testPassed=0
  testTotal=0
  program="$dir/$output"
  tmpfile=$(mktemp /tmp/abc-script.XXXXXX)

  while IFS= read line; do
    lineNum=$(($lineNum + 1))
    case "$line" in
      --TEST*)
        [ $curStatus -ne 0 ] && warning "Unexpected --Test on line $lineNum"
        [ $curStatus -eq 0 ] && curStatus=1
        buf='';;
      --ANSWER*)
        [ $curStatus -ne 1 ] && warning "Unexpected --Answer on line $lineNum"
        [ $curStatus -eq 1 ] && testData="$buf" && curStatus=2
        buf='';;
      --|--\ *)
        [ $curStatus -eq 0 ] && warning "Unexpected end of test on line $lineNum"
        [ $curStatus -eq 1 ] && testData="$buf"
        [ $curStatus -eq 2 ] && testAns="$buf"
        performTest "$testData" "$testAns"
        passed=$?
        [ ! -z "$testAns" ] && 
          testPassed=$(($testPassed + $passed)) &&
          testTotal=$(($testTotal + 1))
        testData=''
        testAns=''
        curStatus=0;;
      *)
        [ -z "$buf" ] && buf="$line" || buf="$buf\n$line";;
    esac
  done < "$testFile"

  [ $curStatus -eq 1 ] && testData="$buf"
  [ $curStatus -eq 2 ] && testAns="$buf"
  if [ $curStatus -ne 0 ]; then
    performTest "$testData" "$testAns"
    passed=$?
    [ ! -z "$testAns" ] && 
      testPassed=$(($testPassed + $passed)) &&
      testTotal=$(($testTotal + 1))
  fi

  if [ "$testTotal" -ne 0 ]; then
    printf '\e[34mSummary: '
    if [ $testPassed -ne $testTotal ]; then
      echo "$testPassed/$testTotal tests passed."
      echo "\e[31m$(($testTotal - $testPassed)) tests failed!\e[0m"
    else
      echo "\e[32m$testPassed/$testTotal tests passed.\e[0m"
    fi
  fi
  rm $tmpfile
}
################ TESTER END ################ 

runProgram() {
  if [ ! -z "$pipeInp" ]; then
    msg "Piping data from '$pipeInp'" 
    cat "$pipeInp" | "$dir/$output" $progArgs
    retval=$?
    [ $retval -ne 0 ] && warning "Program returned non-zero value!" && exit $retval
  else if [ ! -z "$testFile" ]; then
    msg "Taking tests from '$testFile'" 
    runTests
  else
    #echo "$progArgs"
    #echo "\"$dir/$output\" $progArgs"
    sh -c "\"$dir/$output\" $progArgs"
    retval=$?
    [ $retval -ne 0 ] && warning "Program returned non-zero ($retval) value!" && exit $retval
  fi fi
}

############ FULL ARGS #################
fullArgs=""
for arg in "$@"; do
  case "$arg" in  
    *\ * ) fullArgs="$fullArgs '$arg'";;
    *) fullArgs="$fullArgs $arg";;
  esac
done
############ FULL ARGS #################



EJUDGE_FLAGS="-m32 -O2 -std=gnu11 -Wall -Werror -Wno-pointer-sign -Wformat -Wformat-overflow -Wformat-security -Wnull-dereference -Wignored-qualifiers -Wshift-negative-value -Wswitch-default -Wduplicated-branches -Wduplicated-branches -Wfloat-equal -Wshadow -Wpointer-arith -Wpointer-compare -Wtype-limits -Wwrite-strings -Wdangling-else -Wempty-body -Wlogical-op -Wstrict-prototypes -Wold-style-declaration -Wold-style-definition -Wmissing-parameter-type -Wmissing-field-initializers -Wnested-externs -Wvla-larger-than=4096 -lm"
#EJUDGE_FLAGS="-m32 -O2 -Wall -Werror -std=gnu++17 -lm"
CC=gcc
run=0
msg=1
watch=0
file=""
#flags="-std=gnu++17"
flags=""
output=""
warnings=1
pipeInp=""
hideData=0
dir="build"
testFile=""
onlyFailed=0
sanitizers=""
dontTrimAns=0
dontTrimData=0
headCppErrors=0

[ $# -lt 1 ] && helpmsg && exit 0

while [ ! -z "$1" ]; do
  args="$1"
  [ $(echo "$1" | wc -m) -gt 3 ] &&\
    args="$(echo "$1" | fold -w1 | grep -v '-' | sed 's/^/-/')" &&\
    [ "$(echo $1 | fold -w1 | head -1)" != "-" ] && args="$1"

  for arg in $args; do
    case "$arg" in
      -h) helpmsg; exit 0;;
      -r) run=1;;
      -d) 
        [ "$dir" != "build" ] &&
          warning "flag '-p' overwritten by '-d' flag!"
        dir="$2"
        [ "$#" -le 1 ] && error "No directory provided" 9
        shift
        ;;
      -p) 
        [ "$dir" != "build" ] &&
          warning "flag '-d' overwritten by '-p' flag!"
        dir="."
        ;;
      -f) file="$2"; shift;;
      -g) flags="$flags -g";;
      -w) warnings=0;;
      -o) output="$2"; shift;;
      -i) 
        [ ! -z "$testFile" ] &&
          error "Flags i and t are incompatable!" 8
        pipeInp="$2"
        [ "$#" -le 1 ] && error "No pipe file provided" 9
        shift
        ;;
      -t) 
        [ ! -z "$pipeInp" ] &&
          error "Flags i and t are incomp!" 8
        testFile="$2"
        [ "$#" -le 1 ] && error "No test file provided" 9
        shift
        ;;
      -S)
        [ "$#" -le 1 ] && error "No sanitizer level provided" 9
        sanitizers=$(getSanitizer "$2")
        shift
        ;;
      -L) printSanitizers; exit 0;;
      -T) showTestFileStruct; exit 0;;
      -I) hideData=1;;
      -D) dontTrimData=1;;
      -A) dontTrimAns=1;;
      -F) onlyFailed=1;;
      -W) watch=1;;
      -P) CC=g++;;
      -e) errorcode; exit 0;;
      -s) msg=0;;
      -m) flags="$flags -lm";;
      -a) flags="$flags -m32";;
      -l) flags="$flags -ldl";;
      -M) flags="$flags -lrt";;
      -j) flags="$flags $EJUDGE_FLAGS";;
      -H) 
        flags="$flags -fdiagnostics-color=always";
        if [ "$#" -le 1 ] || [ -f "$2" ]; then
          headCppErrors=10;
        else
          headCppErrors=$2; shift
        fi;;
      --) 
        progArgs="$(echo "$fullArgs" | awk -F '--' '{print $2}')";
        break 2
        ;;
      -*) warning "unknown flag '$arg'!";;
       *) 
         [ ! -z "$file" ] &&
           warning "input file overwritten!"
         file="$1"
         ;;
    esac
  done
  shift
done

[ -z $file ] && error "No input file!" 1
[ ! -f "$file" ] && error "File $file not found!" 2
[ ! -z "$pipeInp" ] && [ ! -f "$pipeInp" ] && error "Pipe file not found!" 5
[ ! -z "$testFile" ] && [ ! -f "$testFile" ] && error "Test file not found!" 6
[ $watch -eq 1 ] && [ -z "$(which 'inotifywait')" ] &&
  error "inotifywait is not installed. Cant watch for a file" 7

[ "$dir" = "build" ] && [ ! -d "build" ] && mkdir "build"
[ ! -d "$dir" ] && error "Directory \"$dir\" doesn't exists!" 3

ext=$(echo $file | cut -d'.' -f2)
name=$(echo $file | cut -d'.' -f1)
[ "$name" = "$file" ] && name="$name"EXT
[ -z $output ] && output="$name"

if [ $warnings -eq 1 ]; then
  if [ -z $ext ]; then
    warning "no file extension!" && read -p "Continue? [y/N] " choose
    [ -z $choose ] && choose="n"
    [ "$choose" != "y" ] && msg "No" && exit 4 || msg "Yes"
  fi

  if [ "$ext" != "c" ] && [ "$ext" != "cpp" ]; then 
    warning "$file not a C extension!" && read -p "Continue? [y/N] " choose
    [ -z $choose ] && choose="n"
    [ "$choose" != "y" ] && msg "No" && exit 4 || msg "Yes" 
  fi

fi

#msg "$CC \"$file\" -o \"$dir/$output\" $flags $sanitizers"
if [ $headCppErrors -ne 0 ]; then
  errors=$($CC "$file" -o "$dir/$output" $flags $sanitizers 2>&1) 
  [ $? -ne 0 ] && echo "$errors" | head -$headCppErrors && exit
else
  $CC "$file" -o "$dir/$output" $flags $sanitizers
  [ $? -ne 0 ] && exit
fi
clearScreen=1

if [ $run -eq 1 ]; then
  msg "$name compiled!"

  runProgram

  if [ $watch -eq 1 ]; then
    while event="$(inotifywait -q "$file")"; do
      gcc $flags $file -o "$dir/$output"
      [ $? -ne 0 ] && exit

      [ $clearScreen -eq 1 ] && clear
      echo "\e[35mGot $event. Restarting...\e[0m"
      runProgram
    done
  fi

fi
exit 0
